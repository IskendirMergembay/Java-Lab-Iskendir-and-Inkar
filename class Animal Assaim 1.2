class Animal {
    String food;
    String location;

    public Animal(String food, String location) {
        this.food = food;
        this.location = location;
    }

    public void makeNoise() {
        System.out.println("Such an animal is sleeping");
    }

    public void eat() {
        System.out.println("The animal is eating " + food);
    }

    public void sleep() {
        System.out.println("The animal is sleeping");
    }
}

class Dog extends Animal {
    String breed;

    public Dog(String food, String location, String breed) {
        super(food, location);
        this.breed = breed;
    }

    public void makeNoise() {
        System.out.println("The dog is barking");
    }

    public void eat() {
        System.out.println("The dog is eating " + food);
    }
}

class Cat extends Animal {
    boolean isIndoor;

    public Cat(String food, String location, boolean isIndoor) {
        super(food, location);
        this.isIndoor = isIndoor;
    }

    public void makeNoise() {
        System.out.println("The cat is meowing");
    }

    public void eat() {
        System.out.println("The cat is eating " + food);
    }
}

class Horse extends Animal {
    String color;

    public Horse(String food, String location, String color) {
        super(food, location);
        this.color = color;
    }

    public void makeNoise() {
        System.out.println("The horse is neighing");
    }

    public void eat() {
        System.out.println("The horse is eating " + food);
    }
}

class Veterinary {
    public void treatAnimal(Animal animal) {
        System.out.println("Food: " + animal.food);
        System.out.println("Location: " + animal.location);
    }
}

public class Main {
    public static void main(String[] args) {
        Animal[] animals = new Animal[3];
        animals[0] = new Dog("Dog Food", "Dog House", "Labrador");
        animals[1] = new Cat("Cat Food", "Living Room", true);
        animals[2] = new Horse("Hay", "Stable", "Brown");

        Veterinary vet = new Veterinary();

        for (Animal animal : animals) {
            vet.treatAnimal(animal);
        }
    }
}
